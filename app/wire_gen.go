// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package app

import (
	"context"
	"contrib.go.opencensus.io/exporter/stackdriver/monitoredresource"
	"database/sql"
	"github.com/aws/aws-sdk-go/aws/client"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/go-sql-driver/mysql"
	"github.com/gofunct/mamba/runtime"
	"github.com/gofunct/mamba/runtime/health"
	"github.com/spf13/viper"
	"go.opencensus.io/trace"
	"gocloud.dev/aws/rds"
	"gocloud.dev/blob"
	"gocloud.dev/blob/fileblob"
	"gocloud.dev/blob/gcsblob"
	"gocloud.dev/blob/s3blob"
	"gocloud.dev/gcp"
	"gocloud.dev/gcp/cloudsql"
	"gocloud.dev/mysql/cloudmysql"
	"gocloud.dev/mysql/rdsmysql"
	"gocloud.dev/requestlog"
	"gocloud.dev/server"
	"gocloud.dev/server/sdserver"
	"gocloud.dev/server/xrayserver"
	"net/http"
)

// Injectors from inject_aws.go:

func Aws(ctx context.Context, name string) (*Application, func(), error) {
	client := _wireClientValue
	certFetcher := &rds.CertFetcher{
		Client: client,
	}
	params := awsSQLParams()
	db, cleanup, err := rdsmysql.Open(ctx, certFetcher, params)
	if err != nil {
		return nil, nil, err
	}
	options := _wireOptionsValue
	sessionSession, err := session.NewSessionWithOptions(options)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	bucket, err := awsBucket(ctx, sessionSession)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	ncsaLogger := xrayserver.NewRequestLogger()
	v, cleanup2 := health.New(db)
	xRay := xrayserver.NewXRayClient(sessionSession)
	exporter, cleanup3, err := xrayserver.NewExporter(xRay)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	sampler := trace.AlwaysSample()
	defaultDriver := _wireDefaultDriverValue
	serverOptions := &server.Options{
		RequestLogger:         ncsaLogger,
		HealthChecks:          v,
		TraceExporter:         exporter,
		DefaultSamplingPolicy: sampler,
		Driver:                defaultDriver,
	}
	serverServer := server.New(serverOptions)
	service := runtime.NewService(db, bucket, serverServer, ncsaLogger)
	application := NewApplication(name, service)
	return application, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

var (
	_wireClientValue        = http.DefaultClient
	_wireOptionsValue       = session.Options{}
	_wireDefaultDriverValue = &server.DefaultDriver{}
)

// Injectors from inject_gcp.go:

func Gcp(ctx context.Context, name string) (*Application, func(), error) {
	roundTripper := gcp.DefaultTransport()
	credentials, err := gcp.DefaultCredentials(ctx)
	if err != nil {
		return nil, nil, err
	}
	tokenSource := gcp.CredentialsTokenSource(credentials)
	httpClient, err := gcp.NewHTTPClient(roundTripper, tokenSource)
	if err != nil {
		return nil, nil, err
	}
	remoteCertSource := cloudsql.NewCertSource(httpClient)
	projectID, err := gcp.DefaultProjectID(credentials)
	if err != nil {
		return nil, nil, err
	}
	params := gcpSQLParams(projectID)
	db, err := cloudmysql.Open(ctx, remoteCertSource, params)
	if err != nil {
		return nil, nil, err
	}
	bucket, err := gcpBucket(ctx, httpClient)
	if err != nil {
		return nil, nil, err
	}
	stackdriverLogger := sdserver.NewRequestLogger()
	v, cleanup := health.New(db)
	monitoredresourceInterface := monitoredresource.Autodetect()
	exporter, cleanup2, err := sdserver.NewExporter(projectID, tokenSource, monitoredresourceInterface)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	sampler := trace.AlwaysSample()
	defaultDriver := _wireDefaultDriverValue
	options := &server.Options{
		RequestLogger:         stackdriverLogger,
		HealthChecks:          v,
		TraceExporter:         exporter,
		DefaultSamplingPolicy: sampler,
		Driver:                defaultDriver,
	}
	serverServer := server.New(options)
	service := runtime.NewService(db, bucket, serverServer, stackdriverLogger)
	application := NewApplication(name, service)
	return application, func() {
		cleanup2()
		cleanup()
	}, nil
}

// Injectors from inject_local.go:

func Local(ctx context.Context, name string) (*Application, func(), error) {
	db, err := dialLocalSQL()
	if err != nil {
		return nil, nil, err
	}
	bucket, err := localBucket()
	if err != nil {
		return nil, nil, err
	}
	logger := _wireLoggerValue
	v, cleanup := health.New(db)
	exporter := _wireExporterValue
	sampler := trace.AlwaysSample()
	defaultDriver := _wireDefaultDriverValue
	options := &server.Options{
		RequestLogger:         logger,
		HealthChecks:          v,
		TraceExporter:         exporter,
		DefaultSamplingPolicy: sampler,
		Driver:                defaultDriver,
	}
	serverServer := server.New(options)
	service := runtime.NewService(db, bucket, serverServer, logger)
	application := NewApplication(name, service)
	return application, func() {
		cleanup()
	}, nil
}

var (
	_wireLoggerValue   = requestlog.Logger(nil)
	_wireExporterValue = trace.Exporter(nil)
)

// inject_aws.go:

func awsBucket(ctx context.Context, cp client.ConfigProvider) (*blob.Bucket, error) {
	return s3blob.OpenBucket(ctx, cp, viper.GetString("aws.bucket"), nil)
}

// awsSQLParams is a Wire provider function that returns the RDS SQL connection
// parameters based on the command-line c. Other providers inside
// awscloud.AWS use the parameters to construct a *sql.DB.
func awsSQLParams() *rdsmysql.Params {
	return &rdsmysql.Params{
		Endpoint: viper.GetString("aws.sql.endpoint"),
		Database: viper.GetString("aws.sql.database"),
		User:     viper.GetString("aws.sql.user"),
		Password: viper.GetString("aws.sql.password"),
	}
}

// inject_gcp.go:

func gcpBucket(ctx context.Context, client2 *gcp.HTTPClient) (*blob.Bucket, error) {
	return gcsblob.OpenBucket(ctx, client2, viper.GetString("gcs.bucket"), nil)
}

// gcpSQLParams is a Wire provider function that returns the Cloud SQL
// connection parameters based on the command-line c. Other providers inside
// gcpcloud.GCP use the parameters to construct a *sql.DB.
func gcpSQLParams(id gcp.ProjectID) *cloudmysql.Params {
	return &cloudmysql.Params{
		ProjectID: string(id),
		Region:    viper.GetString("gcs.sql.region"),
		Instance:  viper.GetString("gcs.sql.instance"),
		Database:  viper.GetString("gcs.sql.database"),
		User:      viper.GetString("gcs.sql.user"),
		Password:  viper.GetString("gcs.sql.password"),
	}
}

// inject_local.go:

// localBucket is a Wire provider function that returns a directory-based bucket
// based on the command-line c.
func localBucket() (*blob.Bucket, error) {
	return fileblob.OpenBucket(viper.GetString("local.bucket"), nil)
}

// dialLocalSQL is a Wire provider function that connects to a MySQL database
// (usually on localhost).
func dialLocalSQL() (*sql.DB, error) {
	cfg := &mysql.Config{
		Net:                  "tcp",
		Addr:                 viper.GetString("local.sql.region"),
		DBName:               viper.GetString("local.sql.name"),
		User:                 viper.GetString("local.sql.user"),
		Passwd:               viper.GetString("local.sql.password"),
		AllowNativePasswords: true,
	}
	return sql.Open("mysql", cfg.FormatDSN())
}
